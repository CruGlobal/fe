window.setUpSortables = function setUpSortables() {
	$('[data-sortable]').sortable({
    axis:'y',
    items: '> li.sortable',
    dropOnEmpty:false,
    update: function(event, ui) {
      let sortable = this;
      $.ajax({
        data:$(this).sortable('serialize',{key:sortable.id + '[]'}),
        complete: function(request) {$(sortable).effect('highlight')},
        success: function(request){$('#errors').html(request)},
        type:'POST',
        url: $(sortable).attr('data-sortable-url')
        })
      },
    stop: function(event, ui) {
      let before_dropper = $('li.before-container[data-element_id="'+ui.item.data('element_id'));
      if (before_dropper.length > 0) {
        before_dropper.detach();
        before_dropper.insertBefore(ui.item);
      }
      let after_dropper = $('li.after-container[data-element_id="'+ui.item.data('element_id'));
      if (after_dropper.length > 0) {
        after_dropper.detach();
        after_dropper.insertAfter(ui.item);
      }
    }
	});
	$('[data-sortable][data-sortable-handle]').each(function() {
    const handle = $(this).attr('data-sortable-handle');
    $(this).sortable("option", "handle", handle);
	});

  $('.droppable').droppable({
    activeClass: 'droppable-active',
    hoverClass: 'droppable-hover',
    drop: function( event, ui ) {
      $.post($(this).attr('data-url'), {draggable_element: ui.draggable.attr('id')}, function() {}, 'script')
    },
    activate: function( event, ui ) {
      const $draggable = ui.draggable;
      const $container = $draggable.parents("li.element.container");
      if ($container.length == 1) {
        $container.parent().find('li.around-container[data-element_id="'+$container.data('element_id')+'"]').addClass('droppable-active')
      } else {
        $('li.around-container').removeClass('droppable-active');
      }
    },
    deactivate: function( event, ui ) {
      const $draggable = ui.draggable;
      const $container = $draggable.parents("li.element.container");
      if ($container.length == 1) {
        $container.parent().find('li.around-container[data-element_id="'+$container.data('element_id')+'"]').removeClass('droppable-active')
      } else {
        $('li.around-container').removeClass('droppable-active');
      }
    }
  });
}

window.setUpCalendars = function setUpCalendars() {
  let now = new Date();
  let year = now.getFullYear() + 10;
  $('[data-calendar]').datepicker({
    changeYear:true,
    yearRange: '1950:' + year,
    dateFormat: '<%= Fe.date_format %>'
  })
}

window.setUpJsHelpers = function setUpJsHelpers() {
		// ==================
		// Sortable
		setUpSortables();
		// ==================

  // ==================
  // Calendar
  setUpCalendars();
  // ==================
  <% unless Fe.bootstrap %>$(".tip[title], a[title]").tooltip()<% end %>
}

window.fixGridColumnWidths = function fixGridColumnWidths() {
	$("table.grid").each(function(i, grid) {
    let num_columns = $(grid).find("th").length;
    if (num_columns > 0) {
      let width = (100 / num_columns) + "%";
      $(grid).find("> tbody > tr > th").css("width", width);
      $(grid).find("> tbody > tr > td").css("width", width);
    }
  });
};

function scrollTo(el) {
  if ($(el).length == 0) { return; }
  $('html, body').animate({
    scrollTop: $(el).offset().top
  }, 1000);
}

window.scrollToElement = function scrollToElement(el) {
  if ($(el).length == 0) { return; }
  $('html, body').animate({
    scrollTop: $(el).offset().top
  }, 1000);
}

// jQuery 3 has removed $(document).on('ready', ...) in favor of $(document).ready(...). Manually call it from
// the new method here, so we can avoid changing over all the document ready's.
$(document).ready(function() {
  if (typeof jQuery == 'function' && parseInt(jQuery.fn.jquery.split(".")[0]) >= 3) {
    $(document).trigger("ready")
  }
});
